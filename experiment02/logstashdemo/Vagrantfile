# -*- mode: ruby -*-
# vi: set ft=ruby :

#use vagrant berkshelf plugin
require 'berkshelf/vagrant'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # ubuntu 12.04 LTS box from https://vagrantcloud.com/
  config.vm.box = "hashicorp/precise64"

  config.vm.network :public_network, ip: "192.168.2.220"

  # install latest version of chef onto VM before provisioning
  config.omnibus.chef_version = :latest

  # use Berkschelf to manage cookbook depenencies listed in Berksfile
  config.berkshelf.enabled = true

  config.vm.provision "chef_solo" do |chef|

    # recipes to run
    chef.run_list = %w[
 	 	apt
		java
 	 	elasticsearch
 	 	elasticsearch::plugins
 	 	logstash::server
 	 	kibana::default
 	 	redisio::install
 	 	redisio::enable
	  	graphite
  		ufw
    ]

    # recipe configuration
	chef.json = {

	  	elasticsearch: {
			cluster_name: "logstash",
			min_mem: '64m',
			max_mem: '128m',
		    limits: {
			nofile:  1024,
  			memlock: 512
	  	  },
		    plugins: {
			    'karmi/elasticsearch-paramedic' => {},
				'mobz/elasticsearch-head' => {},
		    	'lukas-vlcek/bigdesk' => { 'version' => '1.0.0' }
		    }
		  },

  		kibana: {
			webserver: 'apache',
		    webserver_listen: '*'
	  	},

  		graphite: {
			listen_port: 8080
		},

	  	redis: {
		    configure_list_max_ziplist: false,
		    config: {
				configure_list_max_ziplist: false
			}
		},

  		logstash: {
			elasticsearch_ip: '127.0.0.1',
			graphite_ip: '127.0.0.1',
			graphite_role: 'graphite',
			server: {
				xms: '128m',
    			xmx: '128m',
				enable_embedded_es: false,
				elasticserver_ip: '127.0.0.1',
    			install_rabbitmq: false,
    			ipv4_only: true,
				inputs: [
					{redis: {
						type: "redis-input",
						host: "localhost",
						data_type: "list",
						key: "logstash"
					}},
				],
				filters: [
				{
					condition: 'if [type] == "apache-access"',
						block: {
							grok: {
								pattern: "%{COMBINEDAPACHELOG}"
							},
							date: {
								match: ["timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
							},
							geoip: {
								source: "clientip"
							}	  
						}
				},
				{
					condition: 'if [type] == "syslog"',
					block: {
						grok: {
							pattern: "%{SYSLOGBASE} %{GREEDYDATA:message}"
						}
					}
				}
				],
			    outputs: [
				    {stdout: {
					    debug: "true",
					    debug_format: "json"
					}},
					{graphite: {
						host: "127.0.0.1",
						metrics: [
							"logstash.events", 1, "hosts.%{@source_host}.apache.%{response}", "%{bytes}"
						],
					}},
			    ]
		    }
		},

  		# please customise these rules as per your requirements admin=192.168.2.10/10.0.2.2,wordpressdemo=192.168.2.222
	  	firewall: {
		  		rules: [
					  {all192168210: { source: "192.168.2.10", action: "allow"}},
					  {all10022: { source: "10.0.2.2", action: "allow"}},
					  {redis1921682222: { port: "6379", source: "192.168.2.222", action: "allow"}},
				],
		 }
	}

  end
end
